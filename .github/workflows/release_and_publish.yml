name: Python package release and publish

on:
  workflow_dispatch:

  workflow_run:
    workflows: ["Python package tests"]
    types:
      - completed

jobs:
  release_publish:
    name: Release and publish package if needed
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests packaging tomli build
          python -m pip install --upgrade twine


      - name: Get version
        id: version
        run: echo "result=$(python .github/scripts/cmd.py get_version)" >> $GITHUB_OUTPUT


      - name: Check release
        id: release
        continue-on-error: true
        run: python .github/scripts/cmd.py check_release

      - name: Build package for release
        if: steps.release.outcome == 'success'
        run: python -m build

      - name: Release on GitHub
        if: steps.release.outcome == 'success'
        run: gh release create ${{ steps.version.outputs.result }} ./dist/* --title "configlayer ${{ steps.version.outputs.result }}" --notes "${{ github.event.head_commit.message }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Check publish
        id: publish
        continue-on-error: true
        run: python .github/scripts/cmd.py check_publish

      - name: Download ${{ steps.version.outputs.result }} release
        if: steps.release.outcome != 'success' && steps.publish.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release download ${{ steps.version.outputs.result }} -D ./dist/

      - name: Publish on PyPi
        if: steps.publish.outcome == 'success'
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine check dist/*
          twine upload --verbose --skip-existing --repository pypi dist/*
